diff -urN linden/indra/newview/app_settings/settings.xml linden-patched/indra/newview/app_settings/settings.xml
--- linden/indra/newview/app_settings/settings.xml	2009-03-11 18:46:05.000000000 +0100
+++ linden-patched/indra/newview/app_settings/settings.xml	2009-04-08 11:47:02.000000000 +0200
@@ -1160,6 +1160,29 @@
       <key>Value</key>
       <integer>1</integer>
     </map>
+    <key>AllowMUpose</key>
+    <map>
+      <key>Comment</key>
+      <string>Allow MU* pose style in chat and IM (with ':' as a synonymous to '/me ')</string>
+      <key>Persist</key>
+      <integer>1</integer>
+      <key>Type</key>
+      <string>Boolean</string>
+      <key>Value</key>
+      <integer>1</integer>
+    </map>
+    <key>ChatVisible</key>
+    <key>AutoCloseOOC</key>
+    <map>
+      <key>Comment</key>
+      <string>Auto-close OOC chat (i.e. add \"))\" if not found and \"((\" was used)</string>
+      <key>Persist</key>
+      <integer>1</integer>
+      <key>Type</key>
+      <string>Boolean</string>
+      <key>Value</key>
+      <integer>1</integer>
+    </map>
     <key>ChatVisible</key>
     <map>
       <key>Comment</key>
diff -urN linden/indra/newview/llchatbar.cpp linden-patched/indra/newview/llchatbar.cpp
--- linden/indra/newview/llchatbar.cpp	2009-03-11 18:46:05.000000000 +0100
+++ linden-patched/indra/newview/llchatbar.cpp	2009-04-08 11:49:36.000000000 +0200
@@ -394,6 +394,36 @@
 			std::string utf8_revised_text;
 			if (0 == channel)
 			{
+				if (gSavedSettings.getBOOL("AutoCloseOOC"))
+				{
+					// Try to find any unclosed OOC chat (i.e. an opening
+					// double parenthesis without a matching closing double
+					// parenthesis.
+					if (utf8text.find("((") != -1 && utf8text.find("))") == -1)
+					{
+						if (utf8text.at(utf8text.length() - 1) == ')')
+						{
+							// cosmetic: add a space first to avoid a closing triple parenthesis
+							utf8text += " ";
+						}
+						// add the missing closing double parenthesis.
+						utf8text += "))";
+					}
+				}
+
+				// Convert MU*s style poses into IRC emotes here.
+				if (gSavedSettings.getBOOL("AllowMUpose") && utf8text.find(":") == 0 && utf8text.length() > 3)
+				{
+					if (utf8text.find(":'") == 0)
+					{
+						utf8text.replace(0, 1, "/me");
+	 				}
+					else if (isalpha(utf8text.at(1)))	// Do not prevent smileys and such.
+					{
+						utf8text.replace(0, 1, "/me ");
+					}
+				}
+
 				// discard returned "found" boolean
 				gGestureManager.triggerAndReviseString(utf8text, &utf8_revised_text);
 			}
diff -urN linden/indra/newview/llimpanel.cpp linden-patched/indra/newview/llimpanel.cpp
--- linden/indra/newview/llimpanel.cpp	2009-03-11 18:46:04.000000000 +0100
+++ linden-patched/indra/newview/llimpanel.cpp	2009-04-08 11:55:53.000000000 +0200
@@ -1977,8 +1977,40 @@
 		LLWString text = mInputEditor->getConvertedText();
 		if(!text.empty())
 		{
-			// Truncate and convert to UTF8 for transport
+			// Convert to UTF8 for transport
 			std::string utf8_text = wstring_to_utf8str(text);
+
+			if (gSavedSettings.getBOOL("AutoCloseOOC"))
+			{
+				// Try to find any unclosed OOC chat (i.e. an opening
+				// double parenthesis without a matching closing double
+				// parenthesis.
+				if (utf8_text.find("((") != -1 && utf8_text.find("))") == -1)
+				{
+					if (utf8_text.at(utf8_text.length() - 1) == ')')
+					{
+						// cosmetic: add a space first to avoid a closing triple parenthesis
+						utf8_text += " ";
+					}
+					// add the missing closing double parenthesis.
+					utf8_text += "))";
+				}
+			}
+
+			// Convert MU*s style poses into IRC emotes here.
+			if (gSavedSettings.getBOOL("AllowMUpose") && utf8_text.find(":") == 0 && utf8_text.length() > 3)
+			{
+				if (utf8_text.find(":'") == 0)
+				{
+					utf8_text.replace(0, 1, "/me");
+				}
+				else if (isalpha(utf8_text.at(1)))	// Do not prevent smileys and such.
+				{
+					utf8_text.replace(0, 1, "/me ");
+				}
+			}
+
+			// Truncate
 			utf8_text = utf8str_truncate(utf8_text, MAX_MSG_BUF_SIZE - 1);
 			
 			if ( mSessionInitialized )
