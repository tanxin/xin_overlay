diff -urN linden/indra/newview/app_settings/settings.xml linden-patched/indra/newview/app_settings/settings.xml
--- linden/indra/newview/app_settings/settings.xml	2008-10-17 17:55:32.000000000 +0200
+++ linden-patched/indra/newview/app_settings/settings.xml	2009-01-08 10:12:48.000000000 +0100
@@ -1171,6 +1171,29 @@
       <key>Value</key>
       <integer>1</integer>
     </map>
+    <key>AllowMUpose</key>
+    <map>
+      <key>Comment</key>
+      <string>Allow MU* pose style in chat and IM (with ':' as a synonymous to '/me ')</string>
+      <key>Persist</key>
+      <integer>1</integer>
+      <key>Type</key>
+      <string>Boolean</string>
+      <key>Value</key>
+      <integer>1</integer>
+    </map>
+    <key>ChatVisible</key>
+    <key>AutoCloseOOC</key>
+    <map>
+      <key>Comment</key>
+      <string>Auto-close OOC chat (i.e. add \"))\" if not found and \"((\" was used)</string>
+      <key>Persist</key>
+      <integer>1</integer>
+      <key>Type</key>
+      <string>Boolean</string>
+      <key>Value</key>
+      <integer>1</integer>
+    </map>
     <key>ChatVisible</key>
     <map>
       <key>Comment</key>
diff -urN linden/indra/newview/llchatbar.cpp linden-patched/indra/newview/llchatbar.cpp
--- linden/indra/newview/llchatbar.cpp	2008-10-17 17:55:32.000000000 +0200
+++ linden-patched/indra/newview/llchatbar.cpp	2009-01-08 10:11:38.000000000 +0100
@@ -394,6 +394,33 @@
 			std::string utf8_revised_text;
 			if (0 == channel)
 			{
+				if (gSavedSettings.getBOOL("AutoCloseOOC"))
+				{
+					// Try to find any unclosed OOC chat (i.e. an opening
+					// double parenthesis without a matching closing double
+					// parenthesis.
+					if (utf8text.find("((") != -1 && utf8text.find("))") == -1)
+					{
+						// add the missing closing double parenthesis.
+						utf8text += "))";
+					}
+				}
+
+ 				// Convert MU*s style poses into IRC emotes here.
+				char tmpstr[5];		/* Flawfinder: ignore */
+				strncpy(tmpstr, utf8text.substr(0, 4).c_str(), sizeof(tmpstr) - 1);		/* Flawfinder: ignore */
+				tmpstr[sizeof(tmpstr) - 1] = '\0';
+				if (!strncmp(tmpstr, ":", 1) && gSavedSettings.getBOOL("AllowMUpose"))
+				{
+					if (!strncmp(tmpstr, ":'", 2))
+					{
+						utf8text.replace(0, 1, "/me");
+					}
+					else if (isalpha(tmpstr[1]))	// Do not prevent smileys and such.
+					{
+						utf8text.replace(0, 1, "/me ");
+					}
+				}
 				// discard returned "found" boolean
 				gGestureManager.triggerAndReviseString(utf8text, &utf8_revised_text);
 			}
diff -urN linden/indra/newview/llimpanel.cpp linden-patched/indra/newview/llimpanel.cpp
--- linden/indra/newview/llimpanel.cpp	2008-10-17 17:55:32.000000000 +0200
+++ linden-patched/indra/newview/llimpanel.cpp	2009-01-08 10:14:07.000000000 +0100
@@ -1939,10 +1939,40 @@
 		LLWString text = mInputEditor->getConvertedText();
 		if(!text.empty())
 		{
-			// Truncate and convert to UTF8 for transport
+			// Convert to UTF8 for transport
 			std::string utf8_text = wstring_to_utf8str(text);
+
+			if (gSavedSettings.getBOOL("AutoCloseOOC"))
+			{
+				// Try to find any unclosed OOC chat (i.e. an opening
+				// double parenthesis without a matching closing double
+				// parenthesis.
+				if (utf8_text.find("((") != -1 && utf8_text.find("))") == -1)
+				{
+					// add the missing closing double parenthesis.
+					utf8_text += "))";
+				}
+			}
+
+			// Truncate
 			utf8_text = utf8str_truncate(utf8_text, MAX_MSG_BUF_SIZE - 1);
 			
+			// Convert MU*s style poses into IRC emotes here.
+			char tmpstr[5];		/* Flawfinder: ignore */
+			strncpy(tmpstr,	utf8_text.substr(0, 4).c_str(),	sizeof(tmpstr) - 1);			/* Flawfinder: ignore */
+			tmpstr[sizeof(tmpstr) - 1] = '\0';
+			if (!strncmp(tmpstr, ":", 1) && gSavedSettings.getBOOL("AllowMUpose"))
+			{
+				if (!strncmp(tmpstr, ":'", 2))
+				{
+					utf8_text.replace(0, 1, "/me");
+				}
+				else if (isalpha(tmpstr[1]))	// Do not prevent smileys and such.
+				{
+					utf8_text.replace(0, 1, "/me ");
+				}
+			}
+
 			if ( mSessionInitialized )
 			{
 				deliver_message(utf8_text,
